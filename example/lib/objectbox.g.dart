// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;

import 'database/model/example.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 8217136407523129847),
      name: 'DBExampleEntity',
      lastPropertyId: const obx_int.IdUid(7, 8246135812635943662),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4000058985701940154),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 232802505623577012),
            name: 'fieldInt',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5705271678394054902),
            name: 'fieldDouble',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3454280107704843619),
            name: 'fieldString',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2474319033711772983),
            name: 'fieldDateTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3165473666446276118),
            name: 'dbFieldExample2Id',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 4591678135678443160),
            relationTarget: 'DBExampleEntity2'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8246135812635943662),
            name: 'dbFieldEnum',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 3981535525837809075),
            name: 'dbFieldExample2List',
            targetId: const obx_int.IdUid(4, 8571171288624672279))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 8571171288624672279),
      name: 'DBExampleEntity2',
      lastPropertyId: const obx_int.IdUid(1, 3041201967132868662),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3041201967132868662),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
obx.Store openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) {
  return obx.Store(getObjectBoxModel(),
      directory: directory,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(4, 8571171288624672279),
      lastIndexId: const obx_int.IdUid(2, 4591678135678443160),
      lastRelationId: const obx_int.IdUid(2, 3981535525837809075),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [2522957041921949233, 5870976386523147058],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        7654855045725675269,
        1039976497022610058,
        1928277840846453526,
        2969432658682362045,
        7340939470640844078,
        8090881568375152369,
        5108526452630830085,
        5722340162250960034
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    DBExampleEntity: obx_int.EntityDefinition<DBExampleEntity>(
        model: _entities[0],
        toOneRelations: (DBExampleEntity object) => [object.dbFieldExample2],
        toManyRelations: (DBExampleEntity object) => {
              obx_int.RelInfo<DBExampleEntity>.toMany(2, object.id):
                  object.dbFieldExample2List
            },
        getId: (DBExampleEntity object) => object.id,
        setId: (DBExampleEntity object, int id) {
          object.id = id;
        },
        objectToFB: (DBExampleEntity object, fb.Builder fbb) {
          final fieldStringOffset = fbb.writeString(object.fieldString);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.fieldInt);
          fbb.addFloat64(2, object.fieldDouble);
          fbb.addOffset(3, fieldStringOffset);
          fbb.addInt64(4, object.fieldDateTime.millisecondsSinceEpoch);
          fbb.addInt64(5, object.dbFieldExample2.targetId);
          fbb.addInt64(6, object.dbFieldEnum);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DBExampleEntity()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..fieldInt =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0)
            ..fieldDouble =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..fieldString = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..fieldDateTime = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0))
            ..dbFieldEnum =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.dbFieldExample2.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.dbFieldExample2.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<DBExampleEntity>(
              object.dbFieldExample2List,
              store,
              obx_int.RelInfo<DBExampleEntity>.toMany(2, object.id));
          return object;
        }),
    DBExampleEntity2: obx_int.EntityDefinition<DBExampleEntity2>(
        model: _entities[1],
        toOneRelations: (DBExampleEntity2 object) => [],
        toManyRelations: (DBExampleEntity2 object) => {},
        getId: (DBExampleEntity2 object) => object.id,
        setId: (DBExampleEntity2 object, int id) {
          object.id = id;
        },
        objectToFB: (DBExampleEntity2 object, fb.Builder fbb) {
          fbb.startTable(2);
          fbb.addInt64(0, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DBExampleEntity2()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [DBExampleEntity] entity fields to define ObjectBox queries.
class DBExampleEntity_ {
  /// See [DBExampleEntity.id].
  static final id =
      obx.QueryIntegerProperty<DBExampleEntity>(_entities[0].properties[0]);

  /// See [DBExampleEntity.fieldInt].
  static final fieldInt =
      obx.QueryIntegerProperty<DBExampleEntity>(_entities[0].properties[1]);

  /// See [DBExampleEntity.fieldDouble].
  static final fieldDouble =
      obx.QueryDoubleProperty<DBExampleEntity>(_entities[0].properties[2]);

  /// See [DBExampleEntity.fieldString].
  static final fieldString =
      obx.QueryStringProperty<DBExampleEntity>(_entities[0].properties[3]);

  /// See [DBExampleEntity.fieldDateTime].
  static final fieldDateTime =
      obx.QueryDateProperty<DBExampleEntity>(_entities[0].properties[4]);

  /// See [DBExampleEntity.dbFieldExample2].
  static final dbFieldExample2 =
      obx.QueryRelationToOne<DBExampleEntity, DBExampleEntity2>(
          _entities[0].properties[5]);

  /// See [DBExampleEntity.dbFieldEnum].
  static final dbFieldEnum =
      obx.QueryIntegerProperty<DBExampleEntity>(_entities[0].properties[6]);

  /// see [DBExampleEntity.dbFieldExample2List]
  static final dbFieldExample2List =
      obx.QueryRelationToMany<DBExampleEntity, DBExampleEntity2>(
          _entities[0].relations[0]);
}

/// [DBExampleEntity2] entity fields to define ObjectBox queries.
class DBExampleEntity2_ {
  /// See [DBExampleEntity2.id].
  static final id =
      obx.QueryIntegerProperty<DBExampleEntity2>(_entities[1].properties[0]);
}
